{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This document describes the gRPC-based Bear Cloud API Service for third-party clients. The Bear Cloud API service enables third parties to:</p> <ol> <li>Send commands to control the robots</li> <li>Receive status updates from robots (e.g., tray status, battery status)</li> <li>Retrieve information about the robots</li> </ol> <p>For a detailed list of API capabilities, please navigate through the API Reference. Bear Cloud API uses the open-source gRPC framework. In the future, corresponding REST APIs will be added.</p>"},{"location":"#overview","title":"Overview","text":"<p>Third-party clients communicate with the Bear Cloud API service via gRPC. For request/response type communication, unary RPC is used. For scenarios where clients need continuous updates from the Bear Cloud API service, server streaming RPC is utilized.</p> <p>For server streaming RPCs, all responses include metadata containing a timestamp and a sequence number:  - Timestamp: The timestamp is based on the local clock where the response was generated and is not globally synchronized, so it should not be used for ordering responses.  - Sequence Number: The sequence number is guaranteed to be incremental and can be used to detect duplicate responses. Note that the sequence number may reset to 0 at any time, though this should be rare (e.g., only during a service or robot restart).</p> <p>If strict detection of response duplication is desired, both the sequence number and timestamp should be used together. </p> <p>Also note the following for streaming RPC queries:  - It will persist for a maximum of 60 minutes, if the query is still needed longer than this time a query must be reissued.  - The messages have delivery guarantees (i.e. QoS) of \u201cbest effort\u201d and not \u201cat least once\u201d<sup>1</sup>, unless specifically noted. This means that some messages can be dropped and not delivered to clients due to multiple reasons such as, but not limited to, packet loss, network traffic load, and processing failures.</p> <p>1: A message will be delivered to the client at least one time, and it might be delivered multiple times due to network issues or processing failures.  - As noted above, clients need to handle duplicate messages.</p> <p>When a gRPC call completes successfully, the server returns an OK status along with the specified response to the client. If an error occurs, gRPC returns an error status code and an error message.</p>"},{"location":"#message-encoding","title":"Message Encoding","text":"<p>gRPC uses Protocol Buffers which provide a serialization format for encoding and decoding, as   well as Interface  Definition  Language</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#february-5-2025","title":"February 5, 2025","text":"Release Beta"},{"location":"changelog/#added-new-endpoints","title":"Added New Endpoints","text":"<ul> <li>GetCurrentMapContent </li> <li>GetLocation </li> <li>GetMap </li> <li>GetMapData </li> <li>SwitchMap <p>Available only with multiple floor maps. </p></li> <li>AppendMission</li> <li>UpdateMission </li> <li>GetRobotSystemInfo</li> </ul>"},{"location":"changelog/#extended-existing-endpoints","title":"Extended Existing Endpoints","text":"<p>The following endpoints were enhanced with backward-compatible features compared to the POC version.</p> <ul> <li>CreateMission <p>Added support for new mission types in the request. </p></li> <li>SubscribeMissionStatus, SubscribeBatteryStatus, SubscribeRobotPose:      <p> Added <code>EventMetadata</code> to the response payloads. </p></li> </ul>"},{"location":"changelog/#unchanged-endpoints","title":"Unchanged Endpoints","text":"<p>These endpoints remain the same as in the POC version.</p> <ul> <li>ChargeRobot </li> <li>ListRobotIDs </li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Coming soon</p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":"<p>Coming soon</p>"},{"location":"guides/examples/golang/","title":"Go Examples","text":"<p>This page provides example usage of the Bear Cloud API Service in Go.</p>"},{"location":"guides/examples/golang/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have installed the Go packages required to compile the protocol buffers:</p> <pre><code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n</code></pre>"},{"location":"guides/examples/golang/#defining-import-paths","title":"Defining Import Paths","text":"<p>In order to compile protocol buffers into Go code, you must first provide Go import paths. Please refer to the Protocol Buffers Documentation.</p>"},{"location":"guides/examples/golang/#compiling-protocol-buffers-into-go","title":"Compiling Protocol Buffers into Go","text":"<p>Run the following commands to generate Go files from the protocol buffer files:</p> <pre><code>REPO_ROOT=$(git rev-parse --show-toplevel)\ncd \"$REPO_ROOT\"\n\nPROTO_OUT=\"examples/go/generated_protos\"\nmkdir -p \"$PROTO_OUT\"\n\n# If you did not specify import paths in each proto file with `option go_package`,\n# then you must add another --go_opt=M${PROTO_FILE}=${GO_IMPORT_PATH} flag for each here.\nprotoc --proto_path=. --go_out=\"$PROTO_OUT\" --go_opt=paths=source_relative \\\n       --go-grpc_out=\"$PROTO_OUT\" --go-grpc_opt=paths=source_relative \\\n       bearrobotics/api/v0/**/*.proto google/api/*.proto\n</code></pre>"},{"location":"guides/examples/golang/#importing-compiled-protos","title":"Importing Compiled Protos","text":"<pre><code>import compiled_pb \"path/to/compiled/proto\"\n</code></pre>"},{"location":"guides/examples/golang/#connecting-to-the-api-with-credentials","title":"Connecting to the API with Credentials","text":""},{"location":"guides/examples/golang/#prerequisites_1","title":"Prerequisites:","text":"<ul> <li>API key (See the Authentication Guide)</li> </ul> <pre><code>func GetToken() (string, error) {\n    // Fetch your API key JWT and return it as a string.\n    // See the example Go client code in the Authentication Guide.\n}\n\nfunc createChannelWithCredentialsRefresh() (*grpc.ClientConn, context.CancelFunc, error) {\n    // Create a secure connection with SSL credentials.\n    // See the example Go client code in the Authentication Guide.\n}\n</code></pre>"},{"location":"guides/examples/golang/#list-robot-ids","title":"List Robot IDs","text":""},{"location":"guides/examples/golang/#prerequisites_2","title":"Prerequisites:","text":"<ul> <li>Compiled pb.go files for <code>cloud_api_service</code></li> <li>API connection with credentials</li> </ul> <pre><code>func listRobotIDs() {\n    // Load the Bearer token from file.\n    token, err := loadBearerToken()\n    if err != nil {\n        log.Fatalf(\"Failed to load token: %v\", err)\n    }\n\n    // Create the gRPC channel.\n    conn, cancelRefresher, err := createChannelWithCredentials()\n    if err != nil {\n        log.Fatalf(\"Failed to create channel: %v\", err)\n    }\n    defer cancelRefresher()\n    defer conn.Close()\n\n    // Create the stub.\n    client := cloud_api_service_pb.NewCloudAPIServiceClient(conn)\n\n    // Prepare the request.\n    req := &amp;cloud_api_service_pb.ListRobotIDsRequest{}\n\n    // Create metadata with Bearer token.\n    md := metadata.New(map[string]string{\n        \"authorization\": fmt.Sprintf(\"Bearer %s\", token),\n    })\n\n    // Make the gRPC call with the Bearer token as metadata.\n    ctx := metadata.NewOutgoingContext(context.Background(), md)\n    resp, err := client.ListRobotIDs(ctx, req)\n    if err != nil {\n        // Handle the error.\n        if status.Code(err) == codes.Unauthenticated {\n            log.Println(\"Authentication failed! Please check your Bearer token.\")\n        } else {\n            log.Printf(\"An error occurred: %v\", err)\n        }\n        return\n    }\n\n    // Handle the response.\n    fmt.Println(\"Listing robot IDs:\", resp)\n}\n</code></pre>"},{"location":"guides/examples/golang/#subscribe-to-battery-status","title":"Subscribe To Battery Status","text":""},{"location":"guides/examples/golang/#prerequisites_3","title":"Prerequisites:","text":"<ul> <li>Compiled pb.go files for <code>cloud_api_service</code></li> <li>API connection with credentials</li> </ul> <pre><code>func subscribeBatteryStatus() {\n    // Load the Bearer token from file.\n    token, err := loadBearerToken()\n    if err != nil {\n        log.Fatalf(\"Failed to load token: %v\", err)\n    }\n\n    // Create the gRPC channel.\n    conn, cancelRefresher, err := createChannelWithCredentials()\n    if err != nil {\n        log.Fatalf(\"Failed to create channel: %v\", err)\n    }\n    defer cancelRefresher()\n    defer conn.Close()\n\n    // Create the stub.\n    client := cloud_api_service_pb.NewCloudAPIServiceClient(conn)\n\n    // Prepare the request.\n    req := &amp;cloud_api_service_pb.SubscribeBatteryStatusRequest{\n        Selector: &amp;cloud_api_service_pb.RobotSelector{\n            TargetId: &amp;cloud_api_service_pb.RobotSelector_RobotIds{\n                RobotIds: &amp;cloud_api_service_pb.RobotSelector_RobotIDs{\n                    Ids: []string{\n                        \"your-robot-id-1\",\n                        \"your-robot-id-2\",\n                        \"your-robot-id-etc\",\n                    },\n                },\n            },\n        },\n    }\n\n    // Create metadata with Bearer token.\n    md := metadata.New(map[string]string{\n        \"authorization\": fmt.Sprintf(\"Bearer %s\", token),\n    })\n\n    // Make the gRPC call with the Bearer token as metadata.\n    ctx := metadata.NewOutgoingContext(context.Background(), md)\n    stream, err := client.SubscribeBatteryStatus(ctx, req)\n    if err != nil {\n        // Handle the error.\n        if status.Code(err) == codes.Unauthenticated {\n            log.Println(\"Authentication failed! Please check your Bearer token.\")\n        } else {\n            log.Printf(\"An error occurred: %v\", err)\n        }\n        return\n    }\n\n    // Handle the response.\n    fmt.Println(\"Subscribing to battery status:\")\n    for {\n        msg, err := stream.Recv()\n        if err == io.EOF {\n            break\n        }\n        if err != nil {\n            log.Fatalf(\"client.SubscribeBatteryStatus failed: %v\", err)\n        }\n        log.Printf(\"Message received: %v\", msg)\n    }\n}\n</code></pre>"},{"location":"guides/examples/python/","title":"Python Examples","text":"<p>This page provides example usage of the Bear Cloud API Service in Python.</p>"},{"location":"guides/examples/python/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have installed the Python package required to compile the protocol buffers:</p> <pre><code>pip install grpcio-tools\n</code></pre>"},{"location":"guides/examples/python/#compiling-protocol-buffers-into-python","title":"Compiling Protocol Buffers into Python","text":"<p>Run the following commands to generate the necessary protocol buffer files:</p> <pre><code>REPO_ROOT=$(git rev-parse --show-toplevel)\ncd \"$REPO_ROOT\"\n\nPROTO_OUT=\"examples/python/generated_protos\"\nmkdir -p \"$PROTO_OUT\"\n\npython3 -m grpc_tools.protoc -I . --python_out=\"$PROTO_OUT\" --grpc_python_out=\"$PROTO_OUT\" bearrobotics/api/v0/**/*.proto google/api/*.proto\n</code></pre>"},{"location":"guides/examples/python/#importing-compiled-protos","title":"Importing Compiled Protos","text":"<pre><code>from cloud_api_service_pb2 import ListRobotIDsRequest\nfrom cloud_api_service_pb2_grpc import CloudAPIServiceStub\n</code></pre>"},{"location":"guides/examples/python/#connecting-to-the-api-with-credentials","title":"Connecting to the API with Credentials","text":""},{"location":"guides/examples/python/#prerequisites_1","title":"Prerequisites:","text":"<ul> <li>API key (See the Authentication Guide)</li> </ul> <pre><code>def get_token():\n    # Fetch your API key JWT and return it as a string.\n    # See the Python reference in the Authentication Guide.\n\ndef create_channel_with_credentials_refresh():\n    # Create a secure connection with SSL credentials.\n    # See the Python reference in the Authentication Guide.\n</code></pre>"},{"location":"guides/examples/python/#list-robot-ids","title":"List Robot IDs","text":""},{"location":"guides/examples/python/#prerequisites_2","title":"Prerequisites:","text":"<ul> <li>Compiled pb.go files for <code>cloud_api_service</code></li> <li>API connection with credentials</li> </ul> <pre><code>def list_robot_ids():\n    try:\n        # Create the stub\n        token = load_bearer_token()\n        channel = create_channel_with_credentials_refresh()\n        stub = CloudAPIServiceStub(channel)\n\n        # Create the request body\n        request = ListRobotIDsRequest()\n\n        # Make the gRPC call with the Bearer token as metadata\n        response = stub.ListRobotIDs(request, metadata=[('authorization', f'Bearer {token}')])\n\n        # Handle the response\n        print(\"Robot IDs:\", response)\n    except grpc.RpcError as e:\n        if e.code() == StatusCode.UNAUTHENTICATED:\n            print(\"Authentication failed! Please check your Bearer token.\")\n        else:\n            print(f\"An error occurred: {e.details()}\")\n</code></pre>"},{"location":"guides/examples/python/#subscribe-to-battery-status","title":"Subscribe To Battery Status","text":""},{"location":"guides/examples/python/#prerequisites_3","title":"Prerequisites:","text":"<ul> <li>Compiled pb.go files for <code>cloud_api_service</code></li> <li>API connection with credentials</li> </ul> <pre><code>def subscribe_battery_status():\n    try:\n        # Create the stub\n        token = load_bearer_token()\n        channel = create_channel_with_credentials()\n        stub = CloudAPIServiceStub(channel)\n\n        # Create the request body\n        request = SubscribeBatteryStatusRequest(\n            selector=RobotSelector(\n                robot_ids=RobotSelector.RobotIDs(\n                    ids=[\n                        \"your-robot-id-1\",\n                        \"your-robot-id-2\",\n                        \"your-robot-id-etc\",\n                    ]\n                )\n            )\n        )\n\n        # Make the gRPC call with the Bearer token as metadata\n        responseChannel = stub.SubscribeBatteryStatus(request, metadata=[('authorization', f'Bearer {token}')])\n\n        # Handle the response\n        for response in responseChannel:\n            print(\"Battery Status:\", response)\n    except grpc.RpcError as e:\n        if e.code() == StatusCode.UNAUTHENTICATED:\n            print(\"Authentication failed! Please check your Bearer token.\")\n        else:\n            print(f\"An error occurred: {e.details()}\")\n</code></pre>"},{"location":"guides/setup/authentication/","title":"Authentication and Authorization with API Key","text":"<p>Clients are provided with an API key in JSON format. When this API key is submitted to the authentication server, it returns a JSON Web Token (JWT), which serves as the credential required for authenticating requests to the Bear Cloud API server via gRPC.</p>"},{"location":"guides/setup/authentication/#api-key-format","title":"API Key Format","text":"<p>The credentials are provided in the following JSON format:</p> <pre><code>{\n  \"api_key\": \"deca1611-fb00-40b6-be4b-9ed797ae1642\",\n  \"scope\": \"YOUR_SCOPE\",\n  \"secret\": \"2cd66c59-a845-4f16-ac1e-50b50e3878ec\"\n}\n</code></pre> <p>All three fields must be correctly matched for the credentials to be authorized:</p> <ul> <li><code>api_key</code>: A unique identifier for the credentials within our system.</li> <li><code>scope</code>: A value fixed at the time the API key is issued. It represents the distributor to which the API key is authorized.</li> <li><code>secret</code>: A passcode associated with the API key. It is essential that the secret be stored securely.</li> </ul>"},{"location":"guides/setup/authentication/#jwt-generation-examples","title":"JWT Generation Examples:","text":""},{"location":"guides/setup/authentication/#curl","title":"curl:","text":"<pre><code>curl -X POST https://api-auth.bearrobotics.ai/authorizeApiAccess \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"api_key\":\"deca1611-fb00-40b6-be4b-9ed797ae1642\",\n          \"scope\":\"YOUR_SCOPE\",\n          \"secret\":\"2cd66c59-a845-4f16-ac1e-50b50e3878ec\"}'\n</code></pre>"},{"location":"guides/setup/authentication/#http-library-go","title":"HTTP library (Go):","text":"<pre><code>func GetToken(url string, creds string) (string, error) {\n   resp, err := http.Post(url, \"application/json\", bytes.NewBufferString(creds))\n   if err != nil {\n       return \"\", err\n   }\n   defer resp.Body.Close()\n\n   if resp.StatusCode != 200 {\n       return \"\", fmt.Errorf(\"failed to get new token: %d\", resp.StatusCode)\n   }\n   body, err := io.ReadAll(resp.Body)\n   if err != nil {\n       return \"\", err\n   }\n   return string(body), nil\n}\n</code></pre>"},{"location":"guides/setup/authentication/#jwt-usage","title":"JWT Usage","text":"<p>Once the JWT is obtained, it must be included in the Authorization header of each outgoing gRPC request using the following format:</p> <pre><code>Authorization: Bearer &lt;JWT&gt;\n</code></pre> <p>The JWT has an expiration time, specified by the <code>exp</code> field. To maintain uninterrupted access, it is recommended to refresh the JWT periodically, ideally every 15 to 20 minutes.</p>"},{"location":"guides/setup/authentication/#jwt-usage-example-go","title":"JWT Usage Example (Go)","text":"<pre><code>type TokenCreds struct {\n   JWT             atomic.Value\n   TransportSecurity bool\n}\n\n// GetRequestMetadata gets the current gRPC request metadata,\n// with current token. This func gets called before every gRPC query.\nfunc (t *TokenCreds) GetRequestMetadata(_ context.Context, _ ...string)\n(map[string]string, error) {\n  if jwtToken := t.JWT.Load(); jwtToken != nil {\n    return map[string]string{\n      \"Authorization\": \"Bearer \" + jwtToken.(string),\n    }, nil\n }\n return nil, fmt.Errorf(\"token is not set\")\n}\n\nfunc createChannelWithCredentialsRefresh() (*grpc.ClientConn, context.CancelFunc, error) {\n   var creds = `{\"api_key\": \"deca1611-fb00-40b6-be4b-9ed797ae1642\",\"scope\": \"YOUR_SCOPE\",\"secret\": \"2cd66c59-a845-4f16-ac1e-50b50e3878ec\"}`\n   token := TokenCreds{TransportSecurity: true}\n\n   ctx, cancelRefresher := context.WithCancel(context.Background())\n   go func() {\n       ticker := time.NewTicker(15 * time.Minute)\n       defer ticker.Stop()\n\n       for {\n           select {\n           case &lt;-ctx.Done():\n               slog.Info(\"Refresher exiting...\")\n               return\n           case &lt;-ticker.C:\n               jwt, err := GetToken(\n                   \"https://api-auth.bearrobotics.ai/authorizeApiAccess\", creds)\n               if err != nil {\n                   slog.Error(\"Failed to get new token\", \"error\", err)\n               }\n               if err == nil {\n                   token.JWT.Store(jwt)\n               }\n           }\n       }\n   }()\n\n   tls_creds := credentials.NewTLS(&amp;tls.Config{})\n   conn, err := grpc.NewClient(\n       serverAddress,\n       grpc.WithTransportCredentials(tls_creds),\n       grpc.WithPerRPCCredentials(token))\n    if err != nil {\n        log.Fatalf(\"Failed to create new gRPC client: %v\", err)\n        return nil, nil, err\n    }\n\n   // Make gRPC queries using conn.\n   // Cancel refresher when no longer needed.\n   return conn, cancelRefresher, nil\n}\n</code></pre>"},{"location":"guides/setup/authentication/#security","title":"Security","text":"<p>All connections to the Bear Cloud API server are secured via TLS. The API server's certificates are signed by Google, a trusted Certificate Authority recognized by most systems.</p>"},{"location":"guides/setup/authentication/#python-references","title":"Python References","text":"<ul> <li>Token-based authentication in gRPC</li> <li>Adding a JWT as part of the request header</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/","title":"Cloud API Service","text":"<p>The definition of Bear Cloud API service.</p>"},{"location":"v0.1/cloud/CloudApiService/#fleet-management","title":"Fleet Management","text":""},{"location":"v0.1/cloud/CloudApiService/#listrobotids","title":"ListRobotIDs","text":"<ul> <li>Request Type: ListRobotIDsRequest</li> <li>Response Type: ListRobotIDsResponse</li> <li>Description:   List all robot IDs that you have permissions for and satisfies the given filter options regardless of robot status.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#map","title":"Map","text":""},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontent","title":"GetCurrentMapContent","text":"<ul> <li>Request Type: GetCurrentMapContentRequest</li> <li>Response Type: GetCurrentMapContentResponse</li> <li>Description:   Retrieve the current map content data, which is loaded on the robot.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getlocation","title":"GetLocation","text":"<ul> <li>Request Type: GetLocationRequest</li> <li>Response Type: GetLocationResponse</li> <li>Description:   Retrieve the current location data to which the robot is connected.If the robot is offline, it uses the cached Location data.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#switchmap","title":"SwitchMap","text":"<ul> <li>Request Type: SwitchMapRequest</li> <li>Response Type: SwitchMapResponse</li> <li>Description:   Switch the current map to a specified map.The request should specify a floor level and section index to be used. Returns the map_id of the switched map.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#mission","title":"Mission","text":""},{"location":"v0.1/cloud/CloudApiService/#appendmission","title":"AppendMission","text":"<ul> <li>Request Type: AppendMissionRequest</li> <li>Response Type: AppendMissionResponse</li> <li>Description:   Append the given mission to the end of the queue. The mission will be added in the order it is received.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#createmission","title":"CreateMission","text":"<ul> <li>Request Type: CreateMissionRequest</li> <li>Response Type: CreateMissionResponse</li> <li>Description:   Create a mission for a given type.The call will fail if the robot cannot go on the requested mission.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatus","title":"SubscribeMissionStatus","text":"<ul> <li>Request Type: SubscribeMissionStatusRequest</li> <li>Response Type: SubscribeMissionStatusResponse</li> <li>Description:   Subscribe to robot's mission status.Upon subscription, the server immediately sends the latest known mission status, followed by updates whenever the mission status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#updatemission","title":"UpdateMission","text":"<ul> <li>Request Type: UpdateMissionRequest</li> <li>Response Type: UpdateMissionResponse</li> <li>Description:   Update the specified mission with the given command.The call will fail if the robot is not on the specified mission or cannot execute the command.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#navigation","title":"Navigation","text":""},{"location":"v0.1/cloud/CloudApiService/#localizerobot","title":"LocalizeRobot","text":"<ul> <li>Request Type: LocalizeRobotRequest</li> <li>Response Type: LocalizeRobotResponse</li> <li>Description:   Localize the robot to a localization goal.If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the localization status.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#setrobotpose","title":"SetRobotPose","text":"<ul> <li>Request Type: SetRobotPoseRequest</li> <li>Response Type: SetRobotPoseResponse</li> <li>Description:   Manually set the robot pose given a pose on the map and a covariance matrix.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatus","title":"SubscribeLocalizationStatus","text":"<ul> <li>Request Type: SubscribeLocalizationStatusRequest</li> <li>Response Type: SubscribeLocalizationStatusResponse</li> <li>Description:   Subscribe to the robot's localization status.Upon subscription, the latest known localization status will be sent. If the robot is actively localizing, statuses will be published upon changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotpose","title":"SubscribeRobotPose","text":"<ul> <li>Request Type: SubscribeRobotPoseRequest</li> <li>Response Type: SubscribeRobotPoseResponse</li> <li>Description:   Subscribe to the robot's pose.Upon subscription, the server provides regular updates (5Hz) of the robot's estimated position.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#settings","title":"Settings","text":""},{"location":"v0.1/cloud/CloudApiService/#getprofile","title":"GetProfile","text":"<ul> <li>Request Type: GetProfileRequest</li> <li>Response Type: GetProfileResponse</li> <li>Description:   Retrieve user-defined profile with customizable settings for a profile_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofiles","title":"GetRobotProfiles","text":"<ul> <li>Request Type: GetRobotProfilesRequest</li> <li>Response Type: GetRobotProfilesResponse</li> <li>Description:   Retrieve a set of user-defined profiles for a specific robot_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurl","title":"GetSoundFileUploadURL","text":"<ul> <li>Request Type: GetSoundFileUploadURLRequest</li> <li>Response Type: GetSoundFileUploadURLResponse</li> <li>Description:   Retrieve the sound file upload URL for specific sound_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#listprofileids","title":"ListProfileIDs","text":"<ul> <li>Request Type: ListProfileIDsRequest</li> <li>Response Type: ListProfileIDsResponse</li> <li>Description:   List all profile IDs for a specific location_id.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#robot-status","title":"Robot Status","text":""},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatus","title":"SubscribeBatteryStatus","text":"<ul> <li>Request Type: SubscribeBatteryStatusRequest</li> <li>Response Type: SubscribeBatteryStatusResponse</li> <li>Description:   Subscribe to the robots' battery status.Upon subscription, the server immediately sends the latest known battery status, followed by updates whenever the battery status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatus","title":"SubscribeRobotStatus","text":"<ul> <li>Request Type: SubscribeRobotStatusRequest</li> <li>Response Type: SubscribeRobotStatusResponse</li> <li>Description:   Subscribe to connection and operation state of the robotUpon subscription, the server immediately sends the latest known operation status, followed by updates whenever the operation status changes.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatuses","title":"SubscribeTrayStatuses","text":"<ul> <li>Request Type: SubscribeTrayStatusesRequest</li> <li>Response Type: SubscribeTrayStatusesResponse</li> <li>Description:   Subscribe for high level tray status.This is only available for robots with trays (e.g. Servi, Plus). Upon subscription, the latest known tray status will be sent, followed by snapshot updates of all tray states when any state is updated. Weight changes are updated at a 10g granularity threshold. Robots with trays that does not have weight sensor will have an UNKNOWN load state and no weight data streamed.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#robot-system","title":"Robot System","text":""},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminfo","title":"GetRobotSystemInfo","text":"<ul> <li>Request Type: GetRobotSystemInfoRequest</li> <li>Response Type: GetRobotSystemInfoResponse</li> <li>Description:   Get the overall robot system information.When called, the server returns robot system information. The system info tends to be static and does not change often.</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/CloudApiService/#appendmissionrequest","title":"AppendMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission</code> Mission"},{"location":"v0.1/cloud/CloudApiService/#appendmissionresponse","title":"AppendMissionResponse","text":"Field Type Description <code>mission_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#createmissionrequest","title":"CreateMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission</code> Mission"},{"location":"v0.1/cloud/CloudApiService/#createmissionresponse","title":"CreateMissionResponse","text":"Field Type Description <code>mission_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontentrequest","title":"GetCurrentMapContentRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getcurrentmapcontentresponse","title":"GetCurrentMapContentResponse","text":"Field Type Description <code>map_content</code> MapContent"},{"location":"v0.1/cloud/CloudApiService/#getlocationrequest","title":"GetLocationRequest","text":"Field Type Description <code>location_id</code> string The unique identifier of the location.The ID is typically a string of uppercase letters and numbers.Example: \"QSVS\"."},{"location":"v0.1/cloud/CloudApiService/#getlocationresponse","title":"GetLocationResponse","text":"Field Type Description <code>location</code> Location Information about the specified location, as represented by alocation.Location message.This includes all relevant details about the location, includingdisplay name, floor, and section info."},{"location":"v0.1/cloud/CloudApiService/#getprofilerequest","title":"GetProfileRequest","text":"Field Type Description <code>profile_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getprofileresponse","title":"GetProfileResponse","text":"Field Type Description <code>profile</code> Profile"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofilesrequest","title":"GetRobotProfilesRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getrobotprofilesresponse","title":"GetRobotProfilesResponse","text":"Field Type Description <code>profiles</code> Profile"},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminforequest","title":"GetRobotSystemInfoRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getrobotsysteminforesponse","title":"GetRobotSystemInfoResponse","text":"Field Type Description <code>robot_system_info</code> RobotSystemInfo robot_system_info contains ID, display name, family,  and software version of the robot."},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurlrequest","title":"GetSoundFileUploadURLRequest","text":"Field Type Description <code>sound_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#getsoundfileuploadurlresponse","title":"GetSoundFileUploadURLResponse","text":"Field Type Description <code>upload_url</code> string"},{"location":"v0.1/cloud/CloudApiService/#listprofileidsrequest","title":"ListProfileIDsRequest","text":"Field Type Description <code>location_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#listprofileidsresponse","title":"ListProfileIDsResponse","text":"Field Type Description <code>profile_ids</code> string"},{"location":"v0.1/cloud/CloudApiService/#listrobotidsrequest","title":"ListRobotIDsRequest","text":"Field Type Description <code>filter</code> RobotFilter"},{"location":"v0.1/cloud/CloudApiService/#listrobotidsresponse","title":"ListRobotIDsResponse","text":"Field Type Description <code>total_robots</code> int32 <code>robot_ids</code> string This might not have all the robot IDs if there are too many.It will have all the robot IDs if the number of robot_ids is the same astotal_robots."},{"location":"v0.1/cloud/CloudApiService/#localizerobotrequest","title":"LocalizeRobotRequest","text":"Field Type Description <code>robot_id</code> string <code>goal</code> LocalizationGoal"},{"location":"v0.1/cloud/CloudApiService/#localizerobotresponse","title":"LocalizeRobotResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#setrobotposerequest","title":"SetRobotPoseRequest","text":"Field Type Description <code>robot_id</code> string <code>pose_with_covariance</code> PoseWithCovariance"},{"location":"v0.1/cloud/CloudApiService/#setrobotposeresponse","title":"SetRobotPoseResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatusrequest","title":"SubscribeBatteryStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscribebatterystatusresponse","title":"SubscribeBatteryStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_id</code> string <code>battery_state</code> BatteryState"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatusrequest","title":"SubscribeLocalizationStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscribelocalizationstatusresponse","title":"SubscribeLocalizationStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_id</code> string <code>localization_state</code> LocalizationState"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatusrequest","title":"SubscribeMissionStatusRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscribemissionstatusresponse","title":"SubscribeMissionStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>mission_state</code> MissionState"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotposerequest","title":"SubscribeRobotPoseRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotposeresponse","title":"SubscribeRobotPoseResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>pose</code> Pose"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatusrequest","title":"SubscribeRobotStatusRequest","text":"Field Type Description <code>selector</code> RobotSelector"},{"location":"v0.1/cloud/CloudApiService/#subscriberobotstatusresponse","title":"SubscribeRobotStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>robot_state</code> RobotState Robot state is not available when robot connection shows disconnected."},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatusesrequest","title":"SubscribeTrayStatusesRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#subscribetraystatusesresponse","title":"SubscribeTrayStatusesResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>tray_states</code> TrayState State of enabled trays, ordered from the top-most tray on the robot to thebottom. This state is only available for robots with trays."},{"location":"v0.1/cloud/CloudApiService/#switchmaprequest","title":"SwitchMapRequest","text":"Field Type Description <code>robot_id</code> string <code>floor_level</code> int32 Positive integer floor_level is the first key used to index the map dict. SwitchMap will raise an exception if there is no matching map.Floor level begins at 1. <code>section_index</code> int32 Non-negative integer section_index is the second key used to  index the map dict. SwitchMap will raise an exception if there is no matching map. Section index begins at 0."},{"location":"v0.1/cloud/CloudApiService/#switchmapresponse","title":"SwitchMapResponse","text":"Field Type Description <code>map_id</code> string"},{"location":"v0.1/cloud/CloudApiService/#updatemissionrequest","title":"UpdateMissionRequest","text":"Field Type Description <code>robot_id</code> string <code>mission_command</code> MissionCommand"},{"location":"v0.1/cloud/CloudApiService/#updatemissionresponse","title":"UpdateMissionResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/Config/","title":"Config","text":""},{"location":"v0.1/cloud/Config/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/Config/#robotfilter","title":"RobotFilter","text":"Field Type Description <code>location_id</code> string Empty location_id denotes all locations."},{"location":"v0.1/cloud/Config/#robotids","title":"RobotIDs","text":"Field Type Description <code>ids</code> stringrepeated A list of robotIDs"},{"location":"v0.1/cloud/Config/#robotselector","title":"RobotSelector","text":"Field Type Description <code>robot_ids</code> RobotIDs A list of specific robot IDs to target. <code>location_id</code> string An identifier for a location, representing all robots  associated with this location."},{"location":"v0.1/cloud/Profiles/","title":"Profiles","text":""},{"location":"v0.1/cloud/Profiles/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/Profiles/#profile","title":"Profile","text":"Field Type Description <code>profile_id</code> string <code>display_name</code> string <code>sound_profile</code> SoundProfile Profile for sound-related settings."},{"location":"v0.1/cloud/Profiles/#soundprofile","title":"SoundProfile","text":"Field Type Description <code>commands</code> Commandrepeated List of commands in the sound profile."},{"location":"v0.1/cloud/Profiles/#command","title":"Command","text":"Field Type Description <code>type</code> Typeenum <code>sound_data</code> SoundDatarepeated List of sound files associated with the command.  Robot will play the sound randomly when it runs into a specific situation."},{"location":"v0.1/cloud/Profiles/#sounddata","title":"SoundData","text":"Field Type Description <code>sound_id</code> string <code>display_name</code> string <code>url</code> string The URL to download the sound file from."},{"location":"v0.1/cloud/Profiles/#commandtypeenum","title":"CommandTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_HELLO 1 TYPE_ARRIVED_HOSTING 2 TYPE_LEAVING_HOSTING 3 TYPE_TAKE_FOOD 4 TYPE_ENJOY 5 A sound is played when the robot unloads and returns to the return point. TYPE_LOAD_DISHES 6 TYPE_THANK_YOU 7 TYPE_ARRIVED_PATROL_SERVING 8 TYPE_LEAVING_PATROL_SERVING 9 TYPE_ARRIVED_PATROL_BUSSING 10 TYPE_LEAVING_PATROL_BUSSING 11 TYPE_ARRIVED_BIRTHDAY 12 TYPE_ARRIVED_ANNIVERSARY 13 TYPE_ARRIVED_CELEBRATION 14 TYPE_ARRIVED_CUSTOM 15 A sound that the user can manually trigger when the robot arrives at a destination. TYPE_EXCUSE_ME 16 TYPE_HAPPY_BIRTHDAY 17 A sound made when arriving at the destination in birthday mode. TYPE_HAPPY_BIRTHDAY_MOVEMENT 18 A sound made when moving in birthday mode. TYPE_SOUND_ZONE 19 A sound that continues to be made while the robot is within the sound zone until it leaves. TYPE_DISINFECT_START 20 TYPE_DISINFECT_CANCELLED 21 TYPE_DISINFECT_FINISHED 22 TYPE_DISINFECT_RETURNED 23"},{"location":"v0.1/cloud/RobotSettings/","title":"Robot Settings","text":""},{"location":"v0.1/cloud/RobotSettings/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/RobotSettings/#robotsysteminfo","title":"RobotSystemInfo","text":"Field Type Description <code>software_version</code> string The distribution version currently installed and running on the robot.e.g., \"servi-24.03\". <code>robot_family</code> RobotFamilyenum <code>robot_id</code> string Unique identifier for the robot. e.g., \"pennybot-abc123\". <code>display_name</code> string A user-friendly name for the robot, typically used for display purposes."},{"location":"v0.1/cloud/RobotSettings/#robotfamilyenum","title":"RobotFamilyEnum","text":"Name Number Description ROBOT_FAMILY_UNKNOWN 0 ROBOT_FAMILY_SERVI 1 ROBOT_FAMILY_SERVI_MINI 2 ROBOT_FAMILY_SERVI_AIR 3 ROBOT_FAMILY_SERVI_PLUS 4 ROBOT_FAMILY_SERVI_LIFT 5 ROBOT_FAMILY_CARTI_100 6 ROBOT_FAMILY_CARTI_600 7"},{"location":"v0.1/cloud/RobotStatus/","title":"Robot Status","text":""},{"location":"v0.1/cloud/RobotStatus/#message-types","title":"Message Types","text":""},{"location":"v0.1/cloud/RobotStatus/#robotconnection","title":"RobotConnection","text":"Field Type Description <code>connection</code> Connectionenum Connection availability of the robot."},{"location":"v0.1/cloud/RobotStatus/#robotstate","title":"RobotState","text":"Name Type Description <code>robot_id</code> string <code>robot_connection</code> RobotConnection Connection availability of the robot."},{"location":"v0.1/cloud/RobotStatus/#connectionenum","title":"ConnectionEnum","text":"Name Number Description CONNECTION_UNKNOWN 0 CONNECTION_CONNECTED 1 Whether the robot is connected to Bear cloud services. CONNECTION_DISCONNECTED 2 Robot is unreachable/offline."},{"location":"v0.1/cloud/experimental/CloudApiService/","title":"Experimental Cloud API Service","text":"<p>The definition of Experimental Bear Cloud API service.</p>"},{"location":"v0.1/cloud/experimental/CloudApiService/#lift","title":"Lift","text":""},{"location":"v0.1/cloud/experimental/CloudApiService/#controlcompartment","title":"ControlCompartment","text":"<ul> <li>Request Type: ControlCompartmentRequest</li> <li>Response Type: ControlCompartmentResponse</li> <li>Description:   Control selected compartment with specified action to be performed. </li> </ul>"},{"location":"v0.1/cloud/experimental/CloudApiService/#subscribecompartmentstatus","title":"SubscribeCompartmentStatus","text":"<ul> <li>Request Type: SubscribeCompartmentStatusRequest</li> <li>Response Type: SubscribeCompartmentStatusResponse</li> <li>Description:   Subscribe to robot's mission status.Upon subscription, the server immediately sends the latest known mission status, followed by updates whenever the mission status changes.</li> </ul>"},{"location":"v0.1/cloud/experimental/CloudApiService/#controlcompartmentrequest","title":"ControlCompartmentRequest","text":"Field Type Description <code>robot_id</code> string <code>compartment_control</code> CompartmentStates"},{"location":"v0.1/cloud/experimental/CloudApiService/#controlcompartmentresponse","title":"ControlCompartmentResponse","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/cloud/experimental/CloudApiService/#subscribecompartmentstatusrequest","title":"SubscribeCompartmentStatusRequest","text":"Field Type Description <code>robot_id</code> string"},{"location":"v0.1/cloud/experimental/CloudApiService/#subscribecompartmentstatusresponse","title":"SubscribeCompartmentStatusResponse","text":"Field Type Description <code>metadata</code> EventMetadata <code>compartment_states</code> CompartmentStates"},{"location":"v0.1/common/Annotations/","title":"Annotations","text":""},{"location":"v0.1/common/Annotations/#message-types","title":"Message Types","text":""},{"location":"v0.1/common/Annotations/#eventmetadata","title":"EventMetadata","text":"Field Type Description <code>timestamp</code> Timestamp The time when the event was recorded. <code>sequence_number</code> int64 An incremental sequence number generated by the robot.The sequence number should never be negative and can be reset to 0.i.e. sequence is valid if it is larger than the previous number or 0."},{"location":"v0.1/common/Math/","title":"Math","text":""},{"location":"v0.1/common/Math/#message-types","title":"Message Types","text":""},{"location":"v0.1/common/Math/#point2d","title":"Point2D","text":"Field Type Description <code>x</code> float The x coordinate of the point in a 2D plane <code>y</code> float The y coordinate of the point in a 2D plane"},{"location":"v0.1/common/Math/#pointwithorientation","title":"PointWithOrientation","text":"Field Type Description <code>x</code> float The x coordinate of the point <code>y</code> float The y coordinate of the point <code>orientation</code> Quaternion The orientation represented as a quaternion"},{"location":"v0.1/common/Math/#quaternion","title":"Quaternion","text":"Field Type Description <code>x</code> float The x component of the quaternion (imaginary part) <code>y</code> float The y component of the quaternion (imaginary part) <code>z</code> float The z component of the quaternion (imaginary part) <code>w</code> float The real (scalar) component of the quaternion"},{"location":"v0.1/location/Annotation/","title":"Annotation","text":""},{"location":"v0.1/location/Annotation/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Annotation/#annotation","title":"Annotation","text":"Field Type Description <code>annotation_id</code> string Example: \"67305\" <code>created_time</code> Timestamp <code>display_name</code> string Example: \"ITCT annotation A\" <code>obstacles</code> Obstaclerepeated Areas on the map that the robot will try to avoid. <code>parameter_zones</code> ParameterZone Areas on the map that have specific parameters. <code>destinations</code> Destinationrepeated Destinations are used to define the single point of interest. <code>preferred_paths</code> PreferredPathrepeated Directional and bi-directional paths  which robots will try to follow when nearby. <code>queues</code> Queuerepeated Queues are used to define the waiting area."},{"location":"v0.1/location/Annotation/#destination","title":"Destination","text":"Field Type Description <code>destination_id</code> string <code>display_name</code> string <code>destination_pose</code> PointWithOrientation Position on the map where the robot would try to  navigate to and orient itself along that direction. <code>type</code> Typeenum <code>docking_param</code> DockingParam Docking parameters for specifying the docking process  at the destination. <code>default_type_data</code> StringMapData Data specific to the destination type, used by the robot  to interact with the destination."},{"location":"v0.1/location/Annotation/#dockingparam","title":"DockingParam","text":"Field Type Description <code>type</code> Typeenum <code>reference</code> Referenceenum <code>reference_id</code> string <code>tuning_params</code> Point2Drepeated The tuning parameters used to define relative docking pose to the reference."},{"location":"v0.1/location/Annotation/#stringmapdata","title":"StringMapData","text":"Name Type Description <code>data</code> <code>map&lt;string, string&gt;</code>"},{"location":"v0.1/location/Annotation/#obstacle","title":"Obstacle","text":"Field Type Description <code>obstacle_id</code> string <code>points</code> Point2D Points that define a polygon where the robot should avoid entering.  The minimum number of points is 3. <code>type</code> Typeenum"},{"location":"v0.1/location/Annotation/#preferredpath","title":"PreferredPath","text":"Field Type Description <code>preferred_path_id</code> string <code>graph_nodes</code> GraphNoderepeated List of graph nodes that make up the preferred path."},{"location":"v0.1/location/Annotation/#queue","title":"Queue","text":"Field Type Description <code>queue_id</code> string <code>queue_poses</code> GraphNoderepeated Represents a list of queuing points where the robot will wait. <code>destination_ids</code> stringrepeated End destinations that a queue can dequeue the robot to."},{"location":"v0.1/location/Annotation/#destinationtypeenum","title":"DestinationTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The default destination type. The robot will try to navigate to this point. TYPE_CONTACT_CHARGER 2 The contact-type charger. The robot can charge through docking. TYPE_INDUCTIVE_CHARGER 3 The inductive-type charger. The robot can charge through docking without physical contact."},{"location":"v0.1/location/Annotation/#dockingparamtypeenum","title":"DockingParamTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The robot will run the default docking process at the destination."},{"location":"v0.1/location/Annotation/#dockingparamrefernceenum","title":"DockingParamRefernceEnum","text":"Name Number Description REFERENCE_UNKNOWN 0 REFERENCE_DEFAULT 1 The default reference for each destination type. REFERENCE_QR_CODE 2 The QR code reference is used to specify the docking position. REFERENCE_VL_MARKER 3 The VL marker reference is used to specify the docking position."},{"location":"v0.1/location/Annotation/#obstacletypeenum","title":"ObstacleTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 TYPE_DEFAULT 1 The default type for obstacle references. TYPE_QR_CODE 2 Specifies the QR code obstacle type. TYPE_VL_MARKER 3 Specifies the VL marker obstacle type."},{"location":"v0.1/location/Location/","title":"Location","text":""},{"location":"v0.1/location/Location/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Location/#location","title":"Location","text":"Field Type Description <code>location_id</code> string Example: \"4RVF\" <code>created_time</code> Timestamp <code>modified_time</code> Timestamp <code>display_name</code> string Examples: \"City Deli &amp; Grill\", \"KNTH\" <code>floors</code> <code>map&lt;string, string&gt;</code> Map of floor identifiers to floor information.The key is the floor level, and the value is the floor information."},{"location":"v0.1/location/Location/#floor","title":"Floor","text":"Field Type Description <code>display_name</code> string Example: \"Ground\" <code>sections</code> Sectionrepeated"},{"location":"v0.1/location/Location/#section","title":"Section","text":"Field Type Description <code>display_name</code> string Usually <code>display_name</code> will be empty if the section is not named. <code>map_ids</code> stringrepeated List of map identifiers associated with this section. <code>current_map_id</code> string Current map identifier."},{"location":"v0.1/location/Map/","title":"Map","text":""},{"location":"v0.1/location/Map/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Map/#annotation","title":"Annotation","text":"Field Type Description <code>destinations</code> Destinationrepeated"},{"location":"v0.1/location/Map/#map","title":"Map","text":"Field Type Description <code>map_id</code> string Example: \"9578\" <code>created_time</code> Timestamp <code>modified_time</code> Timestamp <code>display_name</code> string Example: \"ITCT SEOUL\" <code>map_data_id</code> string Current map data identifier that represents this map. <code>annotation_ids</code> stringrepeated List of annotation identifiers associated with this map. <code>current_annotation_id</code> string Current annotation identifier."},{"location":"v0.1/location/Map/#mapdata","title":"MapData","text":"Field Type Description <code>map_data_id</code> string <code>url</code> string URL to the image data for the map. <code>origin</code> Origin The Origin of the map. <code>m_per_pixel</code> float Maps real-world size to pixelated size (meters per pixel).Equivalent to the \"resolution\" defined in the ROS map server: ROS Map Server"},{"location":"v0.1/location/Map/#mapcontent","title":"MapContent","text":"Field Type Description <code>map_id</code> string <code>data</code> Data <code>annotation</code> Annotationrepeated"},{"location":"v0.1/location/Map/#data","title":"Data","text":"Field Type Description <code>data</code> bytes The image PNG data for the map. <code>origin</code> Origin <code>m_per_pixel</code> float Maps real-world size to pixelated size (meters per pixel).Equivalent to the \"resolution\" defined in the ROS map server: ROS Map Server"},{"location":"v0.1/location/Map/#origin","title":"Origin","text":"Field Type Description <code>x_m</code> float The x-coordinate of the origin of the map in the world frame. <code>y_m</code> float The y-coordinate of the origin of the map in the world frame. <code>yaw_radians</code> float Rotation around the z-axis (counterclockwise) of the map  with respect to the world frame.A yaw of 0 means no rotation."},{"location":"v0.1/location/Types/","title":"Types","text":""},{"location":"v0.1/location/Types/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Types/#graphnode","title":"GraphNode","text":"Field Type Description <code>graph_node_id</code> string <code>graph_node_pose</code> PointWithOrientation Point with orientation of the GraphNode. <code>adjacent_graph_node_ids</code> stringrepeated Adjacent GraphNode IDs that  the robot can navigate from the current GraphNode."},{"location":"v0.1/location/Zones/","title":"Zones","text":""},{"location":"v0.1/location/Zones/#message-types","title":"Message Types","text":""},{"location":"v0.1/location/Zones/#parameterzone","title":"ParameterZone","text":"Field Type Description <code>zone_id</code> string <code>points</code> Point2Drepeated Polygon defining the zone.The minimum number of points is 3. type oneof"},{"location":"v0.1/location/Zones/#oneofzonetype","title":"OneOfZoneType","text":"Field Type Description <code>direction_zone</code> DirectionZone <code>exclusive_zone</code> ExclusiveZone <code>ramp_zone</code> RampZone <code>sound_zone</code> SoundZone <code>speed_zone</code> SpeedZone"},{"location":"v0.1/location/Zones/#directionzone","title":"DirectionZone","text":"Field Type Description <code>heading_radians</code> float The direction vector's angle in radians,  relative to the map's origin and measured from the x-axis. <code>magnitude</code> int32 The magnitude of the direction vector.Typically set to 254 for hard direction zones.The larger the magnitude,  the more the robot will try to align with the direction."},{"location":"v0.1/location/Zones/#exclusivezone","title":"ExclusiveZone","text":"Field Type Description <code>max_robots</code> int32 Maximum number of robots allowed to enter the zone."},{"location":"v0.1/location/Zones/#rampzone","title":"RampZone","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/location/Zones/#soundzone","title":"SoundZone","text":"<ul> <li>(No fields defined)</li> </ul>"},{"location":"v0.1/location/Zones/#speedzone","title":"SpeedZone","text":"Field Type Description <code>max_speed_m_per_sec</code> float Speed limit in the zone."},{"location":"v0.1/robot/Localization/","title":"Localization","text":""},{"location":"v0.1/robot/Localization/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Localization/#localizationgoal","title":"LocalizationGoal","text":"Field Type Description <code>pose</code> Pose"},{"location":"v0.1/robot/Localization/#localizationstate","title":"LocalizationState","text":"Field Type Description <code>state</code> Stateenum"},{"location":"v0.1/robot/Localization/#stateenum","title":"StateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_PREEMPTED 1 Happens when the localization process is preempted before completion. STATE_FAILED 2 STATE_SUCCEEDED 3 STATE_LOCALIZING 4 The robot is actively performing localization."},{"location":"v0.1/robot/Mission/","title":"Mission","text":""},{"location":"v0.1/robot/Mission/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Mission/#destination","title":"Destination","text":"Field Type Description <code>destination_id</code> string"},{"location":"v0.1/robot/Mission/#zone","title":"Zone","text":"Field Type Description <code>zone_id</code> string"},{"location":"v0.1/robot/Mission/#goal","title":"Goal","text":"<p><code>Goal</code> allows one of the following goals</p> Field Type Description <code>destination</code> Destination <code>zone</code> Zone <code>pose</code> Pose"},{"location":"v0.1/robot/Mission/#mission","title":"Mission","text":"Field Type Description <code>type</code> Typeenum <code>goals</code> Goalrepeated The list of goals or destinations for the mission. <code>override_params</code> MissionParams Override parameters for the mission settings,  allowing specific configuration for this mission instance. <code>extension</code> Any"},{"location":"v0.1/robot/Mission/#missioncommand","title":"MissionCommand","text":"Field Type Description <code>mission_id</code> string <code>command</code> Commandenum"},{"location":"v0.1/robot/Mission/#missionparams","title":"MissionParams","text":"<p><code>MissionParams</code> allows one of these 2 <code>params</code></p> Field Type Description <code>traverse_params</code> TraverseParams <code>loop_params</code> LoopParams"},{"location":"v0.1/robot/Mission/#loopparams","title":"LoopParams","text":"Field Type Description <code>mode</code> Moderepeated"},{"location":"v0.1/robot/Mission/#traverseparams","title":"TraverseParams","text":"Field Type Description <code>mode</code> Moderepeated"},{"location":"v0.1/robot/Mission/#missionstate","title":"MissionState","text":"Field Type Description <code>mission_id</code> string <code>state</code> Stateenum <code>goals</code> Goalrepeated All goals for a given mission. <code>current_goal_index</code> int32 <code>navigation_status</code> NavigationStatusenum <code>feedback</code> Any"},{"location":"v0.1/robot/Mission/#loopparamsmodeenum","title":"LoopParamsModeEnum","text":"Name Number Description MODE_UNKNOWN 0 MODE_DEFAULT 1 MODE_BUSSING 2"},{"location":"v0.1/robot/Mission/#missioncommandenum","title":"MissionCommandEnum","text":"Name Number Description COMMAND_UNKNOWN 0 COMMAND_CANCEL 1 COMMAND_PAUSE 2 COMMAND_RESUME 3 COMMAND_FINISH 4"},{"location":"v0.1/robot/Mission/#missionstateenum","title":"MissionStateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_DEFAULT 1 Initial state when no mission has been run (e.g., empty feedback). STATE_RUNNING 2 STATE_PAUSED 3 STATE_CANCELED 4 STATE_SUCCEEDED 5 STATE_FAILED 6"},{"location":"v0.1/robot/Mission/#missiontypeenum","title":"MissionTypeEnum","text":"Name Number Description TYPE_UNKNOWN 0 Default value, indicates an unknown or unspecified mission type. TYPE_ONEOFF 1 A single-goal mission. TYPE_ONEOFF_AUTO 2 An automated single-goal mission that selects the best available goal. TYPE_TRAVERSE 3 A mission involving multiple destinations until a condition, such as weight limit, is met. TYPE_LOOP 4 A mission that repeatedly visits multiple destinations until a condition, such as weight limit, is met. TYPE_WAIT 5 A mission that remains at a specific location until triggered by an external event."},{"location":"v0.1/robot/Mission/#missionstatenavigationstatusenum","title":"MissionStateNavigationStatusEnum","text":"Name Number Description NAVIGATION_STATUS_UNKNOWN 0 Default value, indicates an unknown or undefined navigation status. NAVIGATION_STATUS_FINISHED 1 Indicates the robot has successfully arrived at its goal. NAVIGATION_STATUS_FAILED 2 Indicates the robot failed to reach its goal. NAVIGATION_STATUS_STUCK 3 Indicates the robot is temporarily stuck but has not yet failed. NAVIGATION_STATUS_DOCKING 4 Indicates the robot is in the process of docking. NAVIGATION_STATUS_UNDOCKING 5 Indicates the robot is undocking. NAVIGATION_STATUS_NAVIGATING 6 Indicates the robot is navigating to a destination."},{"location":"v0.1/robot/Robot/","title":"Robot","text":""},{"location":"v0.1/robot/Robot/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Robot/#pose","title":"Pose","text":"Field Type Description <code>x_meters</code> float x, y coordinate inside the Map. <code>y_meters</code> float <code>heading_radians</code> float The heading of the robot in radians.  Ranges from -PI to PI, with 0.0 pointing along the x-axis."},{"location":"v0.1/robot/Robot/#posewithcovariance","title":"PoseWithCovariance","text":"Field Type Description <code>pose</code> Pose <code>covariance</code> doublerepeated A 36-element array, which is a flattened 6\u00d76  covariance matrix in row-major order. Each element represents  the covariance between state variables (X, Y, Z, X-axis rotation,  Y-axis rotation, Z-axis rotation)."},{"location":"v0.1/robot/Status/","title":"Status","text":""},{"location":"v0.1/robot/Status/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/Status/#batterystate","title":"BatteryState","text":"Field Type Description <code>charge_percent</code> int32 State of charge from 0 (battery empty) to 100 (battery full). <code>state</code> Staterepeated <code>charge_method</code> ChargeMethodrepeated"},{"location":"v0.1/robot/Status/#traystate","title":"TrayState","text":"Field Type Description <code>load_state</code> LoadStaterepeated <code>weight_kg</code> float Tray load in kilograms. The minimum precision is 10g. <code>load_ratio</code> float Ratio of the load to the maximum load capacity of the tray. The value could exceed 1.0 if the tray is overloaded. Caveats: If the maximum load is not configured correctly (e.g. 0.0), NaN can be returned."},{"location":"v0.1/robot/Status/#stateenum","title":"StateEnum","text":"Name Number Description STATE_UNKNOWN 0 STATE_CHARGING 1 STATE_DISCHARGING 2 Robot is not connected to the charger and is draining energy from the battery. STATE_FULL 3 While connected to the charger, the battery is fully charged, no more energy can be stored into the battery."},{"location":"v0.1/robot/Status/#chargemethodenum","title":"ChargeMethodEnum","text":"Name Number Description CHARGE_METHOD_UNKNOWN 0 CHARGE_METHOD_NOT_CHARGING 1 CHARGE_METHOD_WIRED 2 CHARGE_METHOD_WIRELESS 3"},{"location":"v0.1/robot/Status/#loadstateenum","title":"LoadStateEnum","text":"Name Number Description LOAD_STATE_UNKNOWN 0 Unknown load state. LOAD_STATE_LOADED 1 The robot is loaded. LOAD_STATE_EMPTY 2 The robot is empty. LOAD_STATE_OVERLOADED 3 The robot is overloaded."},{"location":"v0.1/robot/experimental/Lift/","title":"Lift","text":""},{"location":"v0.1/robot/experimental/Lift/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/experimental/Lift/#compartmentcontrol","title":"CompartmentControl","text":"<p><code>CompartmentControl</code> is used to control the state of compartments, including LED and door states.</p> Field Type Description <code>compartments</code> <code>int32</code>repeated List of compartment states. <code>led</code> Led LED control command. <code>door</code> Door Door control command."},{"location":"v0.1/robot/experimental/Lift/#compartmentcontrolledenum","title":"CompartmentControlLedEnum","text":"Name Number Description LED_UNKNOWN 0 Change nothing. LED_OFF 1 Turn off the LED. LED_ON 2 Turn on the LED."},{"location":"v0.1/robot/experimental/Lift/#compartmentcontroldoorenum","title":"CompartmentControlDoorEnum","text":"Name Number Description DOOR_UNKNOWN 0 Change nothing. DOOR_CLOSE 1 Close the door. DOOR_OPEN 2 Open the door."},{"location":"v0.1/robot/experimental/Lift/#compartmentstates","title":"CompartmentStates","text":"<p><code>CompartmentStates</code> has the states of all compartments.</p> Field Type Description <code>compartment_states</code> CompartmentStaterepeated List of compartment states."},{"location":"v0.1/robot/experimental/Lift/#compartmentstate","title":"CompartmentState","text":"<p><code>CompartmentState</code> represents the state of a single compartment, including its LED and door status.</p> Field Type Description <code>compartment_id</code> <code>int32</code> ID of the compartment. <code>led</code> Led Current LED state. <code>door</code> Door Current door state."},{"location":"v0.1/robot/experimental/Lift/#compartmentstateledenum","title":"CompartmentStateLedEnum","text":"Name Number Description LED_UNKNOWN 0 Unknown LED state. LED_OFF 1 LED is off. LED_ON 2 LED is on."},{"location":"v0.1/robot/experimental/Lift/#compartmentstatedoorenum","title":"CompartmentStateDoorEnum","text":"Name Number Description DOOR_UNKNOWN 0 Unknown door state. DOOR_CLOSING 1 Door is currently moving to close. DOOR_CLOSED 2 Door is fully closed. DOOR_OPENING 3 Door is currently moving to open. DOOR_OPENED 4 Door is fully opened. DOOR_ERROR 5 Door encountered an error (e.g., obstacle stuck or hardware issue)."},{"location":"v0.1/robot/experimental/Mission/","title":"Mission","text":""},{"location":"v0.1/robot/experimental/Mission/#message-types","title":"Message Types","text":""},{"location":"v0.1/robot/experimental/Mission/#missionparams","title":"MissionParams","text":"<p><code>MissionParams</code> allows any kind of <code>params</code> (Currently, there is only <code>oneoff_params</code>).</p> Field Type Description <code>oneoff_params</code> OneoffParams Parameters for a oneoff mission."},{"location":"v0.1/robot/experimental/Mission/#oneoffparams","title":"OneoffParams","text":"<p><code>OneoffParams</code> defines extra parameters for a oneoff mission, particularly related to elevator usage.</p> Field Type Description <code>elevator_mode</code> ElevatorMode Specifies the elevator-related mission parameter."},{"location":"v0.1/robot/experimental/Mission/#elevatormodeenum","title":"ElevatorModeEnum","text":"Value Number Description ELEVATOR_MODE_UNKNOWN 0 Default unknown state. ELEVATOR_MODE_BOARDING 1 The robot ignores the gap between the elevator and the floor when boarding."}]}